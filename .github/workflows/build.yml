name: Build RG3

on:
  push:
    branches:
      - main
      - dev/*
    tags:
      - "*"

jobs:
  build_rg3:
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - {
            name: "Windows MSVC",
            os: windows-2022,
            os_id: "windows",
            cc: "cl",
            cxx: "cl",
            boost_toolset: msvc,
            cmake_generator: "Visual Studio 17 2022",
            llvm_tag: "llvmorg-16.0.4",
            python_version: "3.10",
            os_version: "2022"
          }
          - {
            name: "Ubuntu Linux",
            os: ubuntu-22.04,
            os_id: "linux",
            cc: "gcc-13",
            cxx: "g++-13",
            boost_toolset: gcc,
            cmake_generator: "Ninja",
            llvm_tag: "llvmorg-16.0.4",
            python_version: "3.10",
            os_version: "22.04"
          }

    steps:
      # Download repository with submodules
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: "recursive"

      # Setup msbuild
      - name: Add msbuild to PATH (Windows only)
        if: matrix.config.os_id == 'windows'
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: x64

      # Setup Ninja
      - name: Setup Ninja (Linux, macOS)
        if: matrix.config.os_id == 'linux'
        run: |
          sudo apt-get install -y ninja-build gcc-13 g++-13

      # Setup Python of specific version
      - name: Install Python
        id: install-python3
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.config.python_version }}

      # Install Boost
      - name: Install Boost
        uses: MarkusJx/install-boost@v2.4.4
        id: install-boost
        with:
          boost_version: 1.81.0
          toolset: ${{ matrix.config.boost_toolset }}
          link: static
          platform_version: ${{ matrix.config.os_version }}

      # Try to locate llvm binaries (I'm not sure, but this list should be enough to precache all required things)
      - name: Cache LLVM binaries
        id: cache-llvm-binaries
        uses: actions/cache@v3
        with:
          key: "${{ runner.os }}-build-${{ matrix.config.llvm_tag }}"
          path: |
            llvm_repo/cmake
            llvm_repo/build/cmake
            llvm_repo/build/MinSizeRel
            llvm_repo/build/include
            llvm_repo/build/lib
            llvm_repo/build/tools/clang/include
            llvm_repo/llvm
            llvm_repo/clang

      # Checkout & Build LLVM (On cache miss - build from sources!)
      - name: Checkout LLVM
        if: steps.cache-llvm-binaries.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          submodules: "recursive"
          repository: "llvm/llvm-project"
          ref: ${{ matrix.config.llvm_tag }}
          path: "llvm_repo"

      # Build LLVM (very slow process, lmao)
      - name: Build LLVM
        if: steps.cache-llvm-binaries.outputs.cache-hit != 'true'
        working-directory: llvm_repo
        env:
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }}
        run: |
          mkdir build
          cmake -DLLVM_ENABLE_PROJECTS="clang" -DCMAKE_BUILD_TYPE="MinSizeRel" -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DLLVM_ENABLE_RTTI=ON -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_INCLUDE_TOOLS=ON -DLLVM_TARGETS_TO_BUILD="host" -DLLVM_BUILD_32_BITS=OFF -DLLVM_ENABLE_BINDINGS=OFF -DLLVM_BUILD_DOCS=OFF -S llvm -B build -G "${{ matrix.config.cmake_generator }}"
          cd build
          cmake --build . --config MinSizeRel

      # Build our project
      - name: Build RG3
        env:
          LLVM_DIR: ${{ github.workspace }}/llvm_repo/build/lib/cmake/llvm
          CLANG_DIR: ${{ github.workspace }}/llvm_repo/build/lib/cmake/clang
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
          Python3_USE_STATIC_LIBS: "TRUE"
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }}
        run: |
          mkdir build
          cmake -DCMAKE_BUILD_TYPE="MinSizeRel" -DCMAKE_POSITION_INDEPENDENT_CODE=ON -B build -G "${{ matrix.config.cmake_generator }}"
          cd build
          cmake --build . --config MinSizeRel

      # Install Clang Latest (for testing env; Windows only)
#      - name: Install Clang TestEnv (Windows only)
#        if: matrix.config.os_id == 'windows'
#        uses: egor-tensin/setup-clang@v1
#        with:
#          version: latest
#          platform: x64

      # Run Unit Tests
#      - name: RG3 Run unit tests
#        run: |
#          cd build
#          ctest . -C MinSizeRel --verbose --output-on-failure

      # Run Integration Tests TODO
      # Make dist folder with pyd & pyi files.
#      - name: Create distribution package
#        run: |
#          mkdir dist
#          mv PyBind/rg3py.pyi dist
#          mv build/PyBind/MinSizeRel/rg3py.pyd dist

      # Upload artifacts
#      - name: Upload RG3 artifacts
#        uses: actions/upload-artifact@v2
#        with:
#          name: RG3_${{ runner.os }}
#          path: dist

      # TODO: Add support of release WHL to PyPI
